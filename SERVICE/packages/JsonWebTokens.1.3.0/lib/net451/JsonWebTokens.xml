<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonWebTokens</name>
    </assembly>
    <members>
        <member name="T:Jwt.DefaultJsonSerializer">
            <summary>
            <see cref="T:Jwt.IJsonSerializer"/> implementation using Json.NET.
            </summary>
        </member>
        <member name="M:Jwt.DefaultJsonSerializer.Serialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Jwt.DefaultJsonSerializer.Deserialize``1(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Jwt.IJsonSerializer">
            <summary>
            Specifies a contract for a JSON serializer implementation.
            </summary>
        </member>
        <member name="M:Jwt.IJsonSerializer.Serialize(System.Object)">
            <summary>
            Serializes an object to a JSON string.
            </summary>
            <param name="value">The value to serialize.</param>
            <returns>A JSON string representing of the object.</returns>
        </member>
        <member name="M:Jwt.IJsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes a JSON string to a typed object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="value">A JSON string representing the object.</param>
            <returns>A typed object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Jwt.JsonWebToken">
            <summary>
            Provides methods for encoding and decoding JSON Web Tokens.
            </summary>
        </member>
        <member name="F:Jwt.JsonWebToken.JsonSerializer">
            <summary>
            Gets or sets the <see cref="T:Jwt.IJsonSerializer"/> implementation being used.
            </summary>
        </member>
        <member name="M:Jwt.JsonWebToken.Encode(System.Object,System.Byte[],Jwt.JwtHashAlgorithm)">
            <summary>
            Creates a JWT using the specified payload, key and algorithm.
            </summary>
            <param name="payload">An arbitrary payload (must be serializable to JSON).</param>
            <param name="key">The key bytes used to sign the token.</param>
            <param name="algorithm">The hash algorithm to use.</param>
            <returns>The generated JWT.</returns>
        </member>
        <member name="M:Jwt.JsonWebToken.Encode(System.Object,System.String,Jwt.JwtHashAlgorithm)">
            <summary>
            Creates a JWT using the specified payload, key and algorithm.
            </summary>
            <param name="payload">An arbitrary payload (must be serializable to JSON).</param>
            <param name="key">The key used to sign the token.</param>
            <param name="algorithm">The hash algorithm to use.</param>
            <returns>The generated JWT.</returns>
        </member>
        <member name="M:Jwt.JsonWebToken.Encode(Jwt.JwtData)">
            <summary>
            Creates a JWT using the specified <see cref="T:Jwt.JwtData"/>.
            </summary>
            <param name="data">A <see cref="T:Jwt.JwtData"/> object.</param>
            <returns>The generated JWT.</returns>
        </member>
        <member name="M:Jwt.JsonWebToken.Decode(System.String,System.String,System.Boolean)">
            <summary>
            Decodes the specified JWT and returns the JSON payload.
            </summary>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>A string containing the JSON payload.</returns>
            <exception cref="T:Jwt.SignatureVerificationException">
            If the <paramref name="verify"/> parameter was true and the signature was not valid
            or if the JWT was signed with an unsupported algorithm.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the given <paramref name="token"/> doesn't consist of 3 parts delimited by dots.
            </exception>
        </member>
        <member name="M:Jwt.JsonWebToken.Decode(System.String,System.Byte[],System.Boolean)">
            <summary>
            Decodes the specified JWT and returns the JSON payload.
            </summary>
            <param name="token">The JWT.</param>
            <param name="key">The key bytes that were used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>A string containing the JSON payload.</returns>
            <exception cref="T:Jwt.SignatureVerificationException">
            If the <paramref name="verify"/> parameter was true and the signature was not valid
            or if the JWT was signed with an unsupported algorithm.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the given <paramref name="token"/> doesn't consist of 3 parts delimited by dots.
            </exception>
        </member>
        <member name="M:Jwt.JsonWebToken.DecodeToObject(System.String,System.String,System.Boolean)">
            <summary>
            Decodes the JWT token and deserializes JSON payload to an <see cref="T:System.Object"/>.
            </summary>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>An object representing the payload.</returns>
            <exception cref="T:Jwt.SignatureVerificationException">
            If the <paramref name="verify"/> parameter was true and the signature was not valid
            or if the JWT was signed with an unsupported algorithm.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the given <paramref name="token"/> doesn't consist of 3 parts delimited by dots.
            </exception>
        </member>
        <member name="M:Jwt.JsonWebToken.DecodeToObject(System.String,System.Byte[],System.Boolean)">
            <summary>
            Decodes the JWT token and deserializes JSON payload to an <see cref="T:System.Object"/>.
            </summary>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>An object representing the payload.</returns>
            <exception cref="T:Jwt.SignatureVerificationException">
            If the <paramref name="verify"/> parameter was true and the signature was not valid
            or if the JWT was signed with an unsupported algorithm.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the given <paramref name="token"/> doesn't consist of 3 parts delimited by dots.
            </exception>
        </member>
        <member name="M:Jwt.JsonWebToken.DecodeToObject``1(System.String,System.String,System.Boolean)">
            <summary>
            Decodes the JWT token and deserializes JSON payload to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>An object representing the payload.</returns>
            <exception cref="T:Jwt.SignatureVerificationException">
            If the <paramref name="verify"/> parameter was true and the signature was not valid
            or if the JWT was signed with an unsupported algorithm.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the given <paramref name="token"/> doesn't consist of 3 parts delimited by dots.
            </exception>
        </member>
        <member name="M:Jwt.JsonWebToken.DecodeToObject``1(System.String,System.Byte[],System.Boolean)">
            <summary>
            Decodes the JWT token and deserializes JSON payload to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to return</typeparam>
            <param name="token">The JWT.</param>
            <param name="key">The key that was used to sign the JWT.</param>
            <param name="verify">Whether to verify the signature (default is true).</param>
            <returns>An object representing the payload.</returns>
            <exception cref="T:Jwt.SignatureVerificationException">
            If the <paramref name="verify"/> parameter was true and the signature was not valid
            or if the JWT was signed with an unsupported algorithm.
            </exception>
            <exception cref="T:System.ArgumentException">
            When the given <paramref name="token"/> doesn't consist of 3 parts delimited by dots.
            </exception>
        </member>
        <member name="T:Jwt.JwtBuilder">
            <summary>
            Builder for <see cref="T:Jwt.JwtData"/> objects.
            </summary>
        </member>
        <member name="M:Jwt.JwtBuilder.WithPayload(System.Object)">
            <summary>
            Adds the specified payload to the JWT.
            </summary>
            <param name="payload">The payload.</param>
            <returns>The <see cref="T:Jwt.JwtBuilder"/> instance.</returns>
        </member>
        <member name="M:Jwt.JwtBuilder.IsSerialized">
            <summary>
            Marks the specified payload as already serialized.
            </summary>
            <returns>The <see cref="T:Jwt.JwtBuilder"/> instance.</returns>
        </member>
        <member name="M:Jwt.JwtBuilder.WithKey(System.String)">
            <summary>
            Adds the specified key string to the JWT.
            </summary>
            <param name="key">The string representation of the key.</param>
            <returns>The <see cref="T:Jwt.JwtBuilder"/> instance.</returns>
        </member>
        <member name="M:Jwt.JwtBuilder.WithKey(System.Byte[])">
            <summary>
            Adds the specified key bytes to the JWT.
            </summary>
            <param name="keyBytes">The bytes representation of the key.</param>
            <returns>The <see cref="T:Jwt.JwtBuilder"/> instance.</returns>
        </member>
        <member name="M:Jwt.JwtBuilder.WithAlgorithm(Jwt.JwtHashAlgorithm)">
            <summary>
            Specifies the algorithm being used for hashing the JWT.
            </summary>
            <param name="algorithm">The algorithm being used for hashing the JWT.</param>
            <returns>The <see cref="T:Jwt.JwtBuilder"/> instance.</returns>
        </member>
        <member name="M:Jwt.JwtBuilder.WithHeader(System.String,System.Object)">
            <summary>
            Adds the specified key/value pair as header to the JWT.
            </summary>
            <param name="key">The key of the key/value pair.</param>
            <param name="value">The value of the key/value pair.</param>
            <returns>The <see cref="T:Jwt.JwtBuilder"/> instance.</returns>
        </member>
        <member name="M:Jwt.JwtBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the specified dictionary as headers to the JWT.
            </summary>
            <param name="dict">The dictionary with the headers of the JWT.</param>
            <returns>The <see cref="T:Jwt.JwtBuilder"/> instance.</returns>
        </member>
        <member name="M:Jwt.JwtBuilder.Build">
            <summary>
            Builds the data to a <see cref="T:Jwt.JwtData"/> object.
            </summary>
            <returns>A <see cref="T:Jwt.JwtData"/> object.</returns>
        </member>
        <member name="T:Jwt.JwtData">
            <summary>
            Represents a JSON Web Token.
            </summary>
        </member>
        <member name="P:Jwt.JwtData.KeyBytes">
            <summary>
            Gets or sets the bytes representing the key of the JWT.
            </summary>
        </member>
        <member name="P:Jwt.JwtData.Key">
            <summary>
            Gets or sets a string representing the key of the JWT.
            </summary>
        </member>
        <member name="P:Jwt.JwtData.Payload">
            <summary>
            Gets or sets the payload of the JWT.
            </summary>
        </member>
        <member name="P:Jwt.JwtData.Algorithm">
            <summary>
            Gets or sets the hashing algorithm being used for the JWT.
            </summary>
        </member>
        <member name="P:Jwt.JwtData.Serialized">
            <summary>
            Gets or sets a value indicating whether the payload is already serialized to JSON.
            </summary>
        </member>
        <member name="P:Jwt.JwtData.ExtraHeaders">
            <summary>
            Gets or sets a dictionary of extra heading to append to the JWT.
            </summary>
        </member>
        <member name="T:Jwt.JwtHashAlgorithm">
            <summary>
            Represents the hashing algorithm being used used.
            </summary>
        </member>
        <member name="F:Jwt.JwtHashAlgorithm.HS256">
            <summary>
            Hash-based Message Authentication Code (HMAC) using SHA256.
            </summary>
        </member>
        <member name="F:Jwt.JwtHashAlgorithm.HS384">
            <summary>
            Hash-based Message Authentication Code (HMAC) using SHA256.
            </summary>
        </member>
        <member name="F:Jwt.JwtHashAlgorithm.HS512">
            <summary>
            Hash-based Message Authentication Code (HMAC) using SHA256.
            </summary>
        </member>
        <member name="T:Jwt.SignatureVerificationException">
            <summary>
            Represents errors that occur during verification of the JWT signature.
            </summary>
        </member>
        <member name="M:Jwt.SignatureVerificationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Jwt.SignatureVerificationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
    </members>
</doc>
